Task 1

Images

Task 2

Modularity is an approach when a problem is broken into smaller sub problems and then solved. In OOP paradigm modularity is implemented by the use of classes. Each class is developed and tested independently of another which significantly reduces the amount of bugs.

Code re-use is an approach where the same code is used by other developers extensibly. For example a well developed class can be used by other developers for their own purposes without knowing the implementation details of it.

Encapsulation is an approach where data is put into a class( usually with private access) such that the state of data cannot be seen/changed from the outside (only using accessor and mutator methods which are public). This approach ensure the untegrity of data.

Task 3

A class is a pattern that defines an object. A particular instance of a class is an object. (code example in previous supervision work)

An abstract class is a patter that partially defines an object. An object of an abstract class cannot be instantiated as it has abstract methods the implementation for which is not defined. Instead other classes extend from the abstract class and provide implementation for abstract methods.

public abstract class Animal {
	public abstract void move();
} 

public class Dog extends Animal {
	public void move() {
		run_and_bark();
	}
}

An interface is a purely abstract class which has no state but only method declaration. I assume that there are interfaces in java since an object cannot extend several parent objects unlike c++. Example of interface provided below.

public interface Animal {
	public void move();
}

public interface Eatable {
	public void sacrificeYourself();
}

public class Panda implements Animal, Eatable {
	public void move() {
		move_slowly_and_cutely();
	}
	
	public void sacrificeYourself() {
		commit_cute_suicide();
	}
}

Task 4

Polymorphism is java is dynamic unlike in c++, where it can be static. Polymorphism means that a method can have different forms. In dynamic polymorphism a decision, which method to use, is made at run-time, while in static polymorphism it is decided on compile time.

class Person {

	public:
		virtual void dance() {
			tango();
		}

};

class Student : public Person {
	public:
		void dance() {
			breakdance();
		}
};

Main function:

Person *a = new Person();
Person *b = new Student();
a->dance();
b->dance();

//In the example above "*a" wil dance tango, while "*b" will dance breakdance. If there were no virtual keyword in front of dance in Person both would dance tango, since in that case static polymorphism would be used. The reason why I used C++ for this example is that java has only dynamic polymorphism

Task 5

In my opinion it is impossible to do so without copying implementation of the methods. However, it would be very easy to do this in c++ by extending from both classes. Imho, devs of java eliminated a diamond problem but introduced inconveniences for software devs.


Task 6

Garbage collection is a process that is run continuosly every specific period of time that looks for objects in memory that do not have references to them and frees that memory. Garbage collection of course is an expensive(in terms of time) operation since it uses cpu resources, but convenient for a dev. The issue with finalizers is that we do not know whether a specific object will be garbage collected or not and hence a finalizer might not be called.

Task 7

We could change implementation of toString method. e.g.

public void toString() {
	return (name + " " + surname + "!!!!!");
}

Task 8

Image

Task 9

Repo

